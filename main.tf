provider "aws" {
  region     = var.region
  access_key = var.access_key
  secret_key = var.secret_key
}

resource "aws_vpc" "exploit-vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  tags = {
    "Name" = "Exploit-VPC"
  }
}

resource "aws_subnet" "Public-Subnet-1" {
  vpc_id                  = aws_vpc.exploit-vpc.id
  cidr_block              = var.public_subnet_1_cidr
  map_public_ip_on_launch = true

  tags = {
    "Name" = "Public-Subnet-1"
  }
}


resource "aws_route_table" "Public-Route-Table" {
  vpc_id = aws_vpc.exploit-vpc.id

  tags = {
    "Name" = "Public-Route-Table"
  }
}

resource "aws_route_table_association" "Public_Subnet_1_Association" {
  route_table_id = aws_route_table.Public-Route-Table.id
  subnet_id      = aws_subnet.Public-Subnet-1.id
}


resource "aws_internet_gateway" "vpc_igw" {
  vpc_id = aws_vpc.exploit-vpc.id
  tags = {
    "Name" = "VPC-IGW"
  }
}

resource "aws_route" "vpc_igw_route" {
  route_table_id         = aws_route_table.Public-Route-Table.id
  gateway_id             = aws_internet_gateway.vpc_igw.id
  destination_cidr_block = "0.0.0.0/0"
}


resource "aws_security_group" "ec2-sg" {
  name   = "EC2-SG"
  vpc_id = aws_vpc.exploit-vpc.id

  ingress = [{
    cidr_blocks      = ["0.0.0.0/0"]
    description      = "SG-IN"
    from_port        = 0
    ipv6_cidr_blocks = []
    prefix_list_ids  = []
    protocol         = -1
    security_groups  = []
    self             = false
    to_port          = 0
  }]

  egress = [{
    cidr_blocks      = ["0.0.0.0/0"]
    description      = "SG-OUT"
    from_port        = 0
    ipv6_cidr_blocks = []
    prefix_list_ids  = []
    protocol         = -1
    self             = false
    security_groups  = []
    to_port          = 0
  }]

}

resource "aws_instance" "jndiexploit-server" {
  ami             = var.ami
  instance_type   = var.ec2_instance_type
  key_name        = var.keypair
  subnet_id       = aws_subnet.Public-Subnet-1.id
  security_groups = [aws_security_group.ec2-sg.id]
  user_data       = <<-EOF
              #!/bin/bash
              sudo yum install docker -y
              sudo systemctl start docker.service
              MY_IP=$(curl ipconfig.io)
              sudo docker run --name jndi -p 8080:8080 -p 1389:1389 -e IP=$MY_IP ftntmjchen/jndiexploit:latest
              EOF
  tags = {
    Name = "jndiexploit-server"
  }

}

output "jndi-publicip" {
  value = aws_instance.jndiexploit-server.public_ip
}

resource "aws_instance" "vulnerable-app" {
  ami             = var.ami
  instance_type   = var.ec2_instance_type
  key_name        = var.keypair
  subnet_id       = aws_subnet.Public-Subnet-1.id
  security_groups = [aws_security_group.ec2-sg.id]
  user_data       = <<-EOF
              #!/bin/bash
              sudo yum install docker -y
              sudo systemctl start docker.service
              sudo docker run --name vulnerable-app -p 8090:8080 ftntmjchen/log4jvulnerable:latest
              EOF
  tags = {
    Name = "vulnerable-app"
  }
}

output "vulnerableApp-publicip" {
  value = aws_instance.vulnerable-app.public_ip
}